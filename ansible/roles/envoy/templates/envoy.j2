admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 10000 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/" }
                route: { cluster: some_service }
          http_filters:
          - name: envoy.filters.http.grpc_stats
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
              emit_filter_state: true
              stats_for_all_methods: true
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/tmp/admin_access.log"
              #         this is not necessary
              # typed_json_format: 
              #   "@timestamp": "%START_TIME%"
              #   client.address: "%DOWNSTREAM_REMOTE_ADDRESS%"
              #   client.local.address: "%DOWNSTREAM_LOCAL_ADDRESS%"
              #   envoy.route.name: "%ROUTE_NAME%"
              #   envoy.upstream.cluster: "%UPSTREAM_CLUSTER%"
              #   host.hostname: "%HOSTNAME%"
              #   http.request.body.bytes: "%BYTES_RECEIVED%"
              #   http.request.duration: "%DURATION%"
              #   http.request.headers.accept: "%REQ(ACCEPT)%"
              #   http.request.headers.authority: "%REQ(:AUTHORITY)%"
              #   http.request.headers.id: "%REQ(X-REQUEST-ID)%"
              #   http.request.headers.x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
              #   http.request.headers.x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
              #   http.request.headers.x_b3_traceid: "%REQ(X-B3-TRACEID)%"
              #   http.request.headers.x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
              #   http.request.headers.x_b3_spanid: "%REQ(X-B3-SPANID)%"
              #   http.request.headers.x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
              #   http.request.method: "%REQ(:METHOD)%"
              #   http.response.body.bytes: "%BYTES_SENT%"
              #   service.name: "envoy"
              #   service.version: "1.16"
  clusters:
  - name: some_service
    connect_timeout: 0.25s
    type: STRICT_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: some_service
      endpoints:
      - lb_endpoints:
{% for host in groups['web_db'] %}
        - endpoint:
            address:
              socket_address:
                address: {{ host }}
                port_value: 8099
{% endfor %}
